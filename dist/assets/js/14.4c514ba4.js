(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{215:function(t,e,s){"use strict";s.r(e);var n=s(0),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器同源策略：手动实现cors、jsonp跨域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器同源策略：手动实现cors、jsonp跨域"}},[t._v("#")]),t._v(" 浏览器同源策略：手动实现CORS、JSONP跨域")]),t._v(" "),s("h1",{attrs:{id:"一、同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、同源策略"}},[t._v("#")]),t._v(" 一、同源策略")]),t._v(" "),s("p",[t._v("什么是同源策略？")]),t._v(" "),s("p",[t._v("同源策略（Same-Origin Policy）就是：浏览器规定，只有URL的"),s("strong",[t._v("协议+域名+端口")]),t._v("一模一样，才能向同一域名的服务器请求数据。")]),t._v(" "),s("p",[t._v("为什么浏览器要规定同源策略呢？为了保护用户信息安全")]),t._v(" "),s("p",[t._v("虽然限制是必要的，但往往也会影响到合理的用途，"),s("strong",[t._v("跨域是为了突破浏览器的同源策略限制")])]),t._v(" "),s("p",[t._v('其实cors的原理就是，告诉浏览器："请别担心，这个请求是安全的，让他访问吧"。')]),t._v(" "),s("p",[t._v("而jsonp的原理是，使用浏览器不担心的方式去请求：script标签中的src属性。")]),t._v(" "),s("p",[t._v("先来模拟出跨域的场景，在本地启动一个最简单的node服务，返回数据。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  console.log(\"got conncet\");\n  res.writeHeader(200, {\n    'content-type': 'text/javascript;charset=\"utf-8\"',\n  })\n  const msg = { 'a': 'CORS', 'b': 'JSONP' }\n  const mm = JSON.stringify(msg)\n  let outMsg = `getData(${mm})`\n  res.end(outMsg)\n})\n\nserver.listen(9000)\nconsole.log(`Serve running at http://127.0.0.1:9000/`);\n")])])]),s("p",[t._v("启动服务")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("node server.js\n")])])]),s("p",[t._v("页面显示")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/2.png",alt:"1"}})]),t._v(" "),s("p",[t._v("然后就在当前页面（当前文章阅读页面）f12打开控制台,在console里创建一个ajax请求")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var xhr = **new** *XMLHttpRequest*();\n\nxhr.open('get', 'http://127.0.0.1:9000');\n\nxhr.send();\n")])])]),s("p",[t._v("执行以后就出现跨域报错了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/1.png",alt:"2"}})]),t._v(" "),s("h2",{attrs:{id:"cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),s("p",[t._v("首先来看一下cors的跨域原理，其实报错里就写的很明白，我们访问的资源没有设置该访问源的头。")]),t._v(" "),s("p",[t._v("在cors的规则中，请求分为简单请求和非简单请求，我们上面发送的就是一个简单请求。")]),t._v(" "),s("blockquote",[s("p",[t._v("关于简单请求和非简单请求，参考："),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域资源共享 CORS 详解"),s("OutboundLink")],1)])]),t._v(" "),s("h4",{attrs:{id:"对于简单请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对于简单请求"}},[t._v("#")]),t._v(" 对于简单请求")]),t._v(" "),s("p",[t._v("只要在响应头中（response header）指明允许哪些访问源访问就可以了。")]),t._v(" "),s("p",[t._v("在server.js中给响应头添加 "),s("code",[t._v("Access-Control-Allow-Origin")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  console.log(\"got conncet\");\n  res.writeHeader(200, {\n    'content-type': 'text/javascript;charset=\"utf-8\"',\n    'Access-Control-Allow-Origin': '*' // * 代表允许所有的源访问\n  })\n  const msg = { 'a': 'CORS', 'b': 'JSONP' }\n  const mm = JSON.stringify(msg)\n  let outMsg = `getData(${mm})`\n  res.end(outMsg)\n})\n\nserver.listen(9000)\nconsole.log(`Serve running at http://127.0.0.1:9000/`);\n")])])]),s("p",[t._v("重启node服务，再试一次")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/3.png",alt:"3"}})]),t._v(" "),s("p",[t._v("报错没有了，打开network可以看到 "),s("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 已经生效，数据也成功获取到")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/4.png",alt:"6"}})]),t._v(" "),s("h4",{attrs:{id:"对于非简单请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对于非简单请求"}},[t._v("#")]),t._v(" 对于非简单请求")]),t._v(" "),s("p",[t._v("将上面请求的方法从get改成put，再次请求 （put方法就属于非简单请求）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/8.png",alt:"7"}})]),t._v(" "),s("p",[t._v("可以看到跨域报错又出现了，刚才设置的响应头依然存在，却不起作用了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/6.png",alt:"4"}}),t._v(" 另外这里可以看到我们本来发送的是put请求，请求方法那里写的却是options。原因就是对于非简单请求浏览器会先发送一次预检，预检通过才会发送真正的请求，这个options就是预检请求，因为没有通过，所以也就没有发送真正的请求")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/5.png",alt:"5"}})]),t._v(" "),s("p",[t._v("其实报错中也写的很明白，我们访问的资源没有设置允许对PUT这个方法的访问")]),t._v(" "),s("p",[t._v("在server.js中给响应头添加 "),s("code",[t._v("Access-Control-Allow-Methods")]),t._v("，设置允许put方法的请求")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  console.log(\"got conncet\");\n  res.writeHeader(200, {\n    'content-type': 'text/javascript;charset=\"utf-8\"',\n    'Access-Control-Allow-Origin': '*',// * 代表允许所有的源访问\n    'Access-Control-Allow-Methods': 'PUT,POST,GET'\n  })\n  const msg = { 'a': 'CORS', 'b': 'JSONP' }\n  const mm = JSON.stringify(msg)\n  let outMsg = `getData(${mm})`\n  res.end(outMsg)\n})\n\nserver.listen(9000)\nconsole.log(`Serve running at http://127.0.0.1:9000/`);\n")])])]),s("p",[t._v("重启服务以后再次请求，可以看到跨域报错就消失了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/9.png",alt:"9"}})]),t._v(" "),s("p",[t._v("还可以看到依然先进行了一次预检请求，这次预检请求通过了，继续发送了put请求")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/11.png",alt:"10"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/7.png",alt:"8"}})]),t._v(" "),s("p",[t._v("非简单请求还对请求头的信息有所限制，原理还是一样的，通过"),s("code",[t._v("Access-Control-Allow-Headers")]),t._v("在返回头中设置允许的访问头就ok了,比如")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var xhr = new XMLHttpRequest();\nxhr.open('put', 'http://127.0.0.1:9000');\nxhr.setRequestHeader(\"Cors-Test\", \"biubiubiu\");\nxhr.send();\n")])])]),s("p",[t._v("设置允许 X-Corx-Test这个请求头")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  console.log(\"got conncet\");\n  res.writeHeader(200, {\n    'content-type': 'text/javascript;charset=\"utf-8\"',\n    'Access-Control-Allow-Origin': '*',// * 代表允许所有的源访问\n    'Access-Control-Allow-Methods': 'PUT,POST,GET',\n    'Access-Control-Allow-Headers': 'Cors-Test'\n  })\n  const msg = { 'a': 'CORS', 'b': 'JSONP' }\n  const mm = JSON.stringify(msg)\n  let outMsg = `getData(${mm})`\n  res.end(outMsg)\n})\n\nserver.listen(9000)\nconsole.log(`Serve running at http://127.0.0.1:9000/`);\n")])])]),s("p",[t._v("请求通过")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/12.png",alt:"12"}})]),t._v(" "),s("h2",{attrs:{id:"jsonp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),s("p",[t._v("去掉node服务中对CORS的配置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const http = require('http')\n\nvar server = http.createServer(function (req, res) {\n  console.log(\"got conncet\");\n  res.writeHeader(200, {\n    'content-type': 'text/javascript;charset=\"utf-8\"',\n  })\n  const msg = { 'a': 'CORS', 'b': 'JSONP' }\n  const mm = JSON.stringify(msg)\n  let outMsg = `getData(${mm})`\n  res.end(outMsg)\n})\n\nserver.listen(9000)\nconsole.log(`Serve running at http://127.0.0.1:9000/`);\n")])])]),s("p",[t._v("前面说过jsonp的原理就是使用script标签的src不受浏览器跨域限制的原理")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var script = document.createElement('script');\nscript.src = 'http://127.0.0.1:9000';\ndocument.head.appendChild(script);\nfunction getData(res) {\n  console.log(res);\n}\n")])])]),s("p",[t._v("成功获取数据")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/youknowHRT/document/raw/master/imgs/10.png",alt:"11"}})]),t._v(" "),s("p",[t._v("getData()这个函数名字要前后端约定一致，一般使用string+随机数来生成函数名，另外获取完数据以后最好移除一下script标签")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var script = document.createElement('script');\nscript.src = 'http://127.0.0.1:9000';\ndocument.head.appendChild(script);\nfunction getData(res) {\n  console.log(res);\n  document.head.removeChild(script);\n}\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);